// Code generated by counterfeiter. DO NOT EDIT.
package joeclifakes

import (
	"sync"

	cli "github.com/Carbonfrost/joe-cli"
)

type FakeMiddleware struct {
	ExecuteStub        func(*cli.Context) error
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		arg1 *cli.Context
	}
	executeReturns struct {
		result1 error
	}
	executeReturnsOnCall map[int]struct {
		result1 error
	}
	ExecuteWithNextStub        func(*cli.Context, cli.Action) error
	executeWithNextMutex       sync.RWMutex
	executeWithNextArgsForCall []struct {
		arg1 *cli.Context
		arg2 cli.Action
	}
	executeWithNextReturns struct {
		result1 error
	}
	executeWithNextReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMiddleware) Execute(arg1 *cli.Context) error {
	fake.executeMutex.Lock()
	ret, specificReturn := fake.executeReturnsOnCall[len(fake.executeArgsForCall)]
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		arg1 *cli.Context
	}{arg1})
	stub := fake.ExecuteStub
	fakeReturns := fake.executeReturns
	fake.recordInvocation("Execute", []interface{}{arg1})
	fake.executeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMiddleware) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *FakeMiddleware) ExecuteCalls(stub func(*cli.Context) error) {
	fake.executeMutex.Lock()
	defer fake.executeMutex.Unlock()
	fake.ExecuteStub = stub
}

func (fake *FakeMiddleware) ExecuteArgsForCall(i int) *cli.Context {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	argsForCall := fake.executeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMiddleware) ExecuteReturns(result1 error) {
	fake.executeMutex.Lock()
	defer fake.executeMutex.Unlock()
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMiddleware) ExecuteReturnsOnCall(i int, result1 error) {
	fake.executeMutex.Lock()
	defer fake.executeMutex.Unlock()
	fake.ExecuteStub = nil
	if fake.executeReturnsOnCall == nil {
		fake.executeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.executeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMiddleware) ExecuteWithNext(arg1 *cli.Context, arg2 cli.Action) error {
	fake.executeWithNextMutex.Lock()
	ret, specificReturn := fake.executeWithNextReturnsOnCall[len(fake.executeWithNextArgsForCall)]
	fake.executeWithNextArgsForCall = append(fake.executeWithNextArgsForCall, struct {
		arg1 *cli.Context
		arg2 cli.Action
	}{arg1, arg2})
	stub := fake.ExecuteWithNextStub
	fakeReturns := fake.executeWithNextReturns
	fake.recordInvocation("ExecuteWithNext", []interface{}{arg1, arg2})
	fake.executeWithNextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMiddleware) ExecuteWithNextCallCount() int {
	fake.executeWithNextMutex.RLock()
	defer fake.executeWithNextMutex.RUnlock()
	return len(fake.executeWithNextArgsForCall)
}

func (fake *FakeMiddleware) ExecuteWithNextCalls(stub func(*cli.Context, cli.Action) error) {
	fake.executeWithNextMutex.Lock()
	defer fake.executeWithNextMutex.Unlock()
	fake.ExecuteWithNextStub = stub
}

func (fake *FakeMiddleware) ExecuteWithNextArgsForCall(i int) (*cli.Context, cli.Action) {
	fake.executeWithNextMutex.RLock()
	defer fake.executeWithNextMutex.RUnlock()
	argsForCall := fake.executeWithNextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMiddleware) ExecuteWithNextReturns(result1 error) {
	fake.executeWithNextMutex.Lock()
	defer fake.executeWithNextMutex.Unlock()
	fake.ExecuteWithNextStub = nil
	fake.executeWithNextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMiddleware) ExecuteWithNextReturnsOnCall(i int, result1 error) {
	fake.executeWithNextMutex.Lock()
	defer fake.executeWithNextMutex.Unlock()
	fake.ExecuteWithNextStub = nil
	if fake.executeWithNextReturnsOnCall == nil {
		fake.executeWithNextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.executeWithNextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMiddleware) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	fake.executeWithNextMutex.RLock()
	defer fake.executeWithNextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMiddleware) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cli.Middleware = new(FakeMiddleware)
